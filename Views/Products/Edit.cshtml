@*model Tuto4.Models.ProductProductViewModel viewModel = new ProductViewModel();*@
@model Tuto4.ViewModels.ProductViewModel
            viewModel.CategoryList = new SelectList(db.Categories, "ID", "Name", product.CategoryID);
            viewModel.ImageLists = new List<SelectList>
    ();
    foreach (var imageMapping in product.ProductImageMappings.OrderBy(pim => pim.ImageNumber))
    {
    viewModel.ImageLists.Add(new SelectList(db.ProductImages, "ID", "FileName",
    imageMapping.ProductImageID));
    }
    for (int i = viewModel.ImageLists.Count; i < Constants.NumberOfProductImages; i++)
    {
    viewModel.ImageLists.Add(new SelectList(db.ProductImages, "ID", "FileName"));
    }
    viewModel.ID = product.ID;
    viewModel.Name = product.Name;
    viewModel.Description = product.Description;
    viewModel.Price = product.Price;
    return View(viewModel);

    @{
        ViewBag.Title = "Edit Product";
    }

    <h2>@ViewBag.Title</h2>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Product</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ID)

            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @* @Html.LabelFor(model => model.CategoryID, "CategoryID", htmlAttributes: new { @class = "control-label col-md-2" })*@
                @Html.LabelFor(model => model.CategoryID,@*"CategoryID",*@                        /**/
                                                                                                                  /**/
                                                                                                                  htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(vm => vm.CategoryID, Model.CategoryList, htmlAttributes: new { @class = "form-control" })
                    @* @Html.DropDownList("CategoryID", null, htmlAttributes: new { @class = "form-control" })*@
                    @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                </div>
            </div>
            @for (int i = 0; i < Model.ImageLists.Count; i++)
            {
                <div class="form-group">
                    <label class="control-label col-md-2">Product Image @(i + 1):</label>
                    <div class="col-md-10">
                        @Html.DropDownListFor(vm => vm.ProductImages, Model.ImageLists[i], "Choose Image", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ImageLists, "", new { @class = "textdanger" })
                    </div>
                </div>
            }

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
